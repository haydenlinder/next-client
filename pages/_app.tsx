import "../styles/build.css";
import type { AppContext, AppInitialProps, AppProps } from "next/app";
import Head from "next/head";
import App from "next/app";
import { getUsers } from "./api/apollo_functions/users";
import Router from "next/router";
import { ApolloError } from "@apollo/client";

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className="p-4 bg-black text-white mb-3 absolute w-full top-0">
        <nav className="container">Header</nav>
      </header>
      <main className="max-h-screen min-h-screen flex justify-center overflow-y-scroll pt-28 pb-96">
        <div className="container h-screen flex flex-col items-center">
          <Component {...pageProps} />
        </div>
      </main>
    </>
  );
}

const redirect = (res: AppContext['ctx']['res'], location: string) => {
  if (res) { // server
    res.writeHead(302, {
      Location: location
    }).end();

  } else { // client
    Router.push(location)
  }
}

export const sessionConditionRedirect = async (context: AppContext): Promise<AppInitialProps> => {
  // these will be available on the server
  const { req, res } = context.ctx;

  const path = req?.url || context.ctx.pathname;
  const isProtected = (path !== '/login');

  let isLoggedIn = true;

  try {
    await getUsers();
    isLoggedIn = true;
  } catch (e) {
    const er: ApolloError = e as ApolloError  
    if (er.graphQLErrors[0]?.extensions?.code === "access-denied") {
      isLoggedIn = false;
    }
  }

  const appProps = await App.getInitialProps(context)
  // logged out and requests '/'
  if (!isLoggedIn && isProtected) {
    redirect(res, '/login')
    return appProps
  }
  // logged in and requests '/login'
  else if (isLoggedIn && !isProtected) {
    redirect(res, '/')
    return appProps
  }
  // they are in the right place
  else return {
    pageProps: {
      appProps
    },
  }

}

MyApp.getInitialProps = sessionConditionRedirect

export default MyApp;
